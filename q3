import numpy as np
import matplotlib.pyplot as plt
class PolynomialSolver:
	def solve(self,order,coeffs,method):
		def f(x): #calculating value at x 
			sum=0
			for i in range(order+1):
				sum+=coeffs[i]*(x**(order-i))
			return sum
		
		          
		       
		if method=='bisection':
			l=0                           #lower bound of interval in which root lies
			u=5                           #upper bound of interval in which root lies
			it=6                          #number of iterations
			tolerance=.00001              #value to define accuracy
			
			
			x=np.arange(l-1,u+1,tolerance)
			plt.axis([l-1,u+1,-2,f(u+1)])
                        y=[f(i) for i in  x]
                        plt.plot(x,y,'m')
                        plt.plot(l,f(l),'gs')
			plt.plot(u,f(u),'gs')
			
			while(abs(f(l)-f(u))>tolerance and it>0):
				m=float(l+u)/2
				if(f(l)*f(m)<0):
				    u=m
				elif(f(l)*f(m)>0):
				    l=m
				else:
				    if(f(m)==0):
				        l=m
				        u=m
				    elif(f(u)==0):
				        l=u
				        m=u
				    else:
				        u=l
				        m=l
				    print (l,u,f(l),f(u))
				    break
				plt.plot(l,f(l),'gs')
				plt.plot(u,f(u),'gs')
				
				print (l,u,f(l),f(u))
				it-=1
			plt.plot(m,f(m),'ko')
			plt.scatter(m,f(m), s=800, facecolors='none', edgecolors='r')
			plt.annotate('Root(black dot)', xy=(m, f(m)), xytext=(m, f(m)+2), )
			plt.axhline(y=0)
			plt.show()
			return [l,u]
q=PolynomialSolver()
q.solve(2,[1,0,-1],'bisection') #function is (x**2)-1
